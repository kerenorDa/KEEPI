@using Keepi.Client.Repositories.Interfaces
@using Keepi.Shared
@inject IPostRepository postRepository
@inject IJSRuntime JS
@inject NavigationManager NavManager

<style>
    .saveNewPostBtn {
        box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
        width: 70px;
        height: 30px;
        font-weight: bold;
        font-size: 16px;
        background: #FF966C;
        border: none;
        border-radius: 20px;
        margin-top: 10px;
        margin-right: 10px;
    }

        .saveNewPostBtn:active {
            background: #FAA381;
        }
</style>

@if (postsList == null || user == null)
{
    <h6>Loading...</h6>
}
else if (postsList.Count == 0)
{
    <h6>There are no posts to display...</h6>
}
else
{
    foreach (var post in postsList.OrderByDescending(p => p.Date))
    {
        <div style="border: none; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); border-radius:10px; margin-bottom: 10px; width: 500px; height: auto;">
            <table style="width: 100%">
                @if (isEditing && post.Id == editingPostId)
                {
                    @* <NewPostComponent isEditMode="true" postToEdit="@post" /> *@

                    <div style="border: none; box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19); border-radius:10px; margin-bottom: 10px; width: 500px; height: auto;">
                        <table style="width: 100%">
                            <tr>
                                <p style="margin-left: 50px; margin-top: 10px; font-weight: bold;">Category:</p>
                            </tr>
                            <tr align="center">
                                <select style="width: 80%; height: 30px;" id="comboBox" @bind="selectedOption">
                                    @foreach (var option in Categories)
                                    {
                                        <option value="@option">@option</option>
                                    }
                                </select>
                            </tr>
                            <tr>
                                <p style="margin-left: 50px; margin-top: 10px; font-weight: bold;">Content:</p>
                            </tr>
                            <tr align="center">
                                <textarea style="width: 80%; height: 60px; max-height: 60px;" type="text" @bind="postContent"></textarea>
                            </tr>
                            <tr>
                                <div style="display: flex; margin-left: 50px;">
                                    <button class="saveNewPostBtn" @onclick="SaveEditPost">Save</button>
                                    <button class="saveNewPostBtn" @onclick="CancelEditPost">Cancel</button>
                                </div>
                            </tr>
                            <tr>
                                <p></p>
                            </tr>
                        </table>
                    </div>
                }
                else
                {
                    <tr>
                        <table style="border-bottom: none; width: 100%; background: #EAEAEA; border-top-left-radius: 10px; border-top-right-radius: 10px;">
                            <tr>
                                <td style="width: 10%">
                                    <img style="width: 18px; height: 18px; margin-left: 5px;" src="@post.User.ProfilePhoto" />
                                </td>
                                <td style="font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">@post.User.Username</td>
                                @if (post.UserId == user.Id)
                                {
                                    <td style="width: 10%">
                                        <button style="width: 20px; height: 20px; background:none; border: none; align-content:center;" @onclick="()=>EditPost(post)">
                                            <image style="width: 15px; height: 15px;" src="/Resources/Images/editIcon.png"></image>
                                        </button>
                                    </td>
                                    <td style="width: 10%">
                                        <button style="width: 20px; height: 20px; background:none; border: none; align-content:center;" @onclick="()=>DeletePost(post.Id)">
                                            <image style="width: 15px; height: 15px;" src="/Resources/Images/deleteIcon.png"></image>
                                        </button>
                                    </td>
                                }
                                @if (post.UserId != user.Id)
                                {
                                    <td style="width: 10%">

                                        @if (userSavedPosts != null && userSavedPosts.FirstOrDefault(p=> p.Id == post.Id) != null)
                                        {
                                            <button style="width: 20px; height: 20px; background:none; border: none; align-content:center;" @onclick="()=>UnsavePostFromUserCollection(post.Id)">
                                                <image style="width: 15px; height: 15px;" src="/Resources/Images/saved.png"></image>
                                            </button>
                                        }
                                        else
                                        {
                                            <button style="width: 20px; height: 20px; background:none; border: none; align-content:center;" @onclick="()=>SavePostToUserCollection(post.Id)">
                                                <image style="width: 15px; height: 15px;" src="/Resources/Images/unsaved.png"></image>
                                            </button>
                                        }
                                    </td>
                                }
                            </tr>
                        </table>
                    </tr>
                    <tr align="center" style="font-family: 'Franklin Gothic Medium', 'Arial Narrow', Arial, sans-serif;">@post.Category</tr>
                    <tr>
                        <td style="width:100%;">
                            <p style="margin-left: 10px; margin-right: 10px; white-space: pre-line;">@post.Content</p>
                        </td>
                    </tr>

                    <tr align="right">
                        <p style="margin-right: 10px;">@post.Date.ToShortDateString()</p>
                    </tr>


                }
            </table>
        </div>

    }
}

@code {
    [Parameter] public List<Post> postsList { get; set; }
    User user;
    private List<Post> userSavedPosts;
    private bool isEditing = false;
    private Guid editingPostId;
    private string selectedOption;
    private string postContent;
    Post postToEdit;

    private List<string> Categories = new List<string>
    {
      "Animal care services",
      "Baby and child care services",
      "Elderly care services",
      "Event security",
      "Security of private buildings",
      "Security of public buildings",
      "Storage services"
    };

    protected override async Task OnInitializedAsync()
    {
        user = await JS.InvokeAsync<User>("localStorageHelper.get", "user");
        if (user != null)
        {
            userSavedPosts = await postRepository.GetUserSavedPosts(user.Id);
        }

    }

    private async Task DeletePost(Guid postId)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this post?"); // Confirm

        if (confirmed)
        {
            var response = await postRepository.DeletePost(postId);

            if (response != null && response.Count > 0)
            {
                if (response[0])
                    NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
            }
            else
            {
                //TODO failed to delete...
            }
        }
    }

    private void EditPost(Post post)
    {
        isEditing = true;
        editingPostId = post.Id;
        postToEdit = post;
        selectedOption = post.Category;
        postContent = post.Content;
    }

    private async Task SaveEditPost()
    {
        List<Post> editedPost = new List<Post>();

        if (postToEdit.Category != selectedOption)
        {
            editedPost = await postRepository.EditPostCategory(postToEdit.Id, selectedOption);
        }
        if (postToEdit.Content != postContent)
        {
            editedPost = await postRepository.EditPostContent(postToEdit.Id, postContent);
        }

        if (editedPost != null && editedPost.Count > 0)
        {
            isEditing = false;
            NavManager.NavigateTo(NavManager.Uri, true);
            //var p = postsList.Where(p => p.Id == editedPost[0].Id);
            //postsList.Remove((Post)p);
            //postsList.Add(editedPost[0]);
            //StateHasChanged();
        }
        else
        {
            await JS.InvokeAsync<object>("alert", "Failed to edit post");
        }
    }

    private void CancelEditPost()
    {
        selectedOption = null;
        postContent = string.Empty;
        isEditing = false;
    }

    private async Task SavePostToUserCollection(Guid postId)
    {
        var response = await postRepository.SavePostToUserCollection(user.Id, postId);
        userSavedPosts = await postRepository.GetUserSavedPosts(user.Id);

        //NavManager.NavigateTo(NavManager.Uri, forceLoad: true);

        // if (response != null && response.Count > 0)
        // {
        //     if (response[0])
        //         NavManager.NavigateTo(NavManager.Uri, forceLoad: true);
        // }
        // else
        // {
        //     //TODO failed to delete...
        // }

    }

    private async Task UnsavePostFromUserCollection(Guid postId)
    {
        var response = await postRepository.UnsavePostFromUserCollection(user.Id, postId);
        userSavedPosts = await postRepository.GetUserSavedPosts(user.Id);
        //NavManager.NavigateTo(NavManager.Uri, forceLoad: true);

    }

}